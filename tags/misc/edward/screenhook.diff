Index: src/fltk/fltk.h
===================================================================
--- src/fltk/fltk.h	(revision 556)
+++ src/fltk/fltk.h	(working copy)
@@ -366,6 +366,7 @@
     virtual bool Next(void) { return true; };
     virtual void Activate(void) { };
     virtual bool CanActivate(void) { return true; };
+    virtual bool Finish(void) { return true; };
 };
 
 class CLangScreen: public CBaseScreen
@@ -495,6 +496,7 @@
     virtual Fl_Group *Create(void);
     virtual void UpdateLang(void);
     virtual void Activate(void);
+    virtual bool Finish();
     
     virtual CBaseLuaInputField *CreateInputField(const char *label, const char *desc, const char *val, int max, const char *type);
     virtual CBaseLuaCheckbox *CreateCheckbox(const char *desc, const std::vector<std::string> &l);
Index: src/fltk/installer.cpp
===================================================================
--- src/fltk/installer.cpp	(revision 556)
+++ src/fltk/installer.cpp	(working copy)
@@ -378,6 +378,10 @@
     
     if ((*cur != m_ScreenList.back()) && (!(*cur)->Next()))
         return;
+
+    // Run Finish Hook on Config screen
+    if (!(*cur)->Finish())
+        return;
     
     std::list<CBaseScreen *>::iterator it = cur;
     
@@ -1378,6 +1382,17 @@
         m_LuaWidgets[n]->UpdateLanguage();
 }
 
+bool CCFGScreen::Finish()
+{
+    if (GetFinishHook().length() > 0) {
+        bool ret = false;
+        m_pOwner->DoCall(GetFinishHook().c_str(),NULL,CLuaVM::CALLRET_BOOLEAN,(void *)&ret);
+        return ret;
+    } else {
+        return true;
+    }
+}
+
 CBaseLuaInputField *CCFGScreen::CreateInputField(const char *label, const char *desc, const char *val, int max, const char *type)
 {
     const int h = CLuaInputField::CalcHeight(m_pGroup->w() - 80, desc);
Index: src/main/lua.cpp
===================================================================
--- src/main/lua.cpp	(revision 556)
+++ src/main/lua.cpp	(working copy)
@@ -259,6 +259,39 @@
     m_iPushedArgs = 0;
 }
 
+void CLuaVM::DoCall(ECallRet rettype, void *ret)
+{
+    if (lua_pcall(m_pLuaState, m_iPushedArgs, 1, 0) != 0)
+    {
+        const char *errmsg = lua_tostring(m_pLuaState, -1);
+        if (!errmsg)
+            errmsg = "Unknown error!";
+        else if (!strcmp(errmsg, "CExUser"))
+            throw Exceptions::CExUser();
+            
+        throw Exceptions::CExLua(CreateText("Error running function: %s", errmsg));
+    }
+    // Fetch return value
+    switch (rettype) {
+        case CALLRET_BOOLEAN:
+            if (lua_isboolean(m_pLuaState,-1))
+            *(bool*)ret = lua_toboolean(m_pLuaState,-1);
+            break;
+        case CALLRET_INTEGER:
+            if (lua_isnumber(m_pLuaState,-1))
+            *(int*)ret = lua_tointeger(m_pLuaState,-1);
+            break;
+        case CALLRET_STRING:
+            if (lua_isstring(m_pLuaState,-1))
+            *(const char**)ret = lua_tostring(m_pLuaState,-1);
+            break;
+        case CALLRET_NONE:
+            break;
+    }
+    lua_pop(m_pLuaState,1); 
+    m_iPushedArgs = 0;
+}
+
 bool CLuaVM::GetNumVar(lua_Number *out, const char *var, const char *tab)
 {
     GetGlobal(var, tab);
Index: src/main/main.cpp
===================================================================
--- src/main/main.cpp	(revision 556)
+++ src/main/main.cpp	(working copy)
@@ -127,6 +127,12 @@
     ReadLang();
 }
 
+void CMain::DoCall(const char *func, const char *tab, CLuaVM::ECallRet rettype, void *ret) {
+    if (m_LuaVM.InitCall(func, tab)) {
+        m_LuaVM.DoCall(rettype,ret);
+    }
+}
+
 void CMain::SetUpSU(const char *msg)
 {
     m_SUHandler.SetUser("root");
Index: src/main/install.cpp
===================================================================
--- src/main/install.cpp	(revision 556)
+++ src/main/install.cpp	(working copy)
@@ -367,6 +367,7 @@
     m_LuaVM.RegisterClassFunc("cfgscreen", CBaseCFGScreen::LuaAddRadioButton, "addradiobutton", this);
     m_LuaVM.RegisterClassFunc("cfgscreen", CBaseCFGScreen::LuaAddDirSelector, "adddirselector", this);
     m_LuaVM.RegisterClassFunc("cfgscreen", CBaseCFGScreen::LuaAddCFGMenu, "addcfgmenu", this);
+    m_LuaVM.RegisterClassFunc("cfgscreen", CBaseCFGScreen::LuaSetFinishHook, "setfinishhook", this);
     
     m_LuaVM.InitClass("inputfield");
     m_LuaVM.RegisterClassFunc("inputfield", CBaseLuaInputField::LuaGet, "get", this);
@@ -780,6 +781,17 @@
     return 1;
 }
 
+int CBaseCFGScreen::LuaSetFinishHook(lua_State *L)
+{
+    CBaseInstall *pInstaller = (CBaseInstall *)lua_touserdata(L, lua_upvalueindex(1));
+    CBaseCFGScreen *screen = pInstaller->m_LuaVM.CheckClass<CBaseCFGScreen *>("cfgscreen", 1);
+    const char *desc = luaL_checkstring(L, 2);
+    
+    screen->m_szFinishHook.assign(desc);
+    
+    return 1;	
+}
+
 // -------------------------------------
 // Base Lua Inputfield Class
 // -------------------------------------
Index: src/main/main.h
===================================================================
--- src/main/main.h	(revision 556)
+++ src/main/main.h	(working copy)
@@ -115,7 +115,9 @@
     void PushArg(lua_Number n);
     void PushArg(const char *s);
     void DoCall(void);
-    
+    enum ECallRet { CALLRET_NONE, CALLRET_INTEGER, CALLRET_BOOLEAN, CALLRET_STRING};
+    void DoCall(ECallRet rettype, void *ret);
+
     bool GetNumVar(lua_Number *out, const char *var, const char *tab=NULL);
     bool GetNumVar(lua_Integer *out, const char *var, const char *tab=NULL);
     bool GetStrVar(std::string *out, const char *var, const char *tab=NULL);
@@ -266,6 +268,8 @@
     virtual void Init(int argc, char **argv);
     virtual void UpdateLanguage(void) { ReadLang(); };
     
+    void DoCall(const char *func, const char *tab, CLuaVM::ECallRet rettype, void *ret);
+    
     // Functions for lua binding
     static int LuaInitDirIter(lua_State *L);
     static int LuaDirIter(lua_State *L);
Index: src/main/install.h
===================================================================
--- src/main/install.h	(revision 556)
+++ src/main/install.h	(working copy)
@@ -202,6 +202,7 @@
 
 class CBaseCFGScreen
 {
+    std::string m_szFinishHook;
 public:
     virtual ~CBaseCFGScreen(void) { };
     
@@ -217,4 +218,7 @@
     static int LuaAddRadioButton(lua_State *L);
     static int LuaAddDirSelector(lua_State *L);
     static int LuaAddCFGMenu(lua_State *L);
+    static int LuaSetFinishHook(lua_State *L);
+
+    const std::string &GetFinishHook() { return m_szFinishHook; };
 };
