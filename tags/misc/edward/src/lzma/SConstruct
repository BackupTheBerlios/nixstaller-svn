opts = Options()
opts.Add('CC', 'The C compiler', 'gcc')
opts.Add('CXX', 'The C++ compiler', 'g++')

env = Environment(options = opts, CCFLAGS = "-Wall -O2", CPPPATH='.')

Help(opts.GenerateHelpText(env))

#Import('env')

LZMA_FILES = [
'7zip/Compress/LZMA_Alone/LzmaAlone.cpp',
'7zip/Compress/LZMA_Alone/LzmaBench.cpp',
'7zip/Compress/LZMA_Alone/LzmaRam.cpp',
'7zip/Compress/LZMA_Alone/LzmaRamDecode.c',
'7zip/Compress/LZMA_C/LzmaDecode.c',
'7zip/Compress/Branch/BranchX86.c',
'7zip/Compress/LZMA/LZMADecoder.cpp',
'7zip/Compress/LZMA/LZMAEncoder.cpp',
'7zip/Compress/LZ/LZInWindow.cpp',
'7zip/Compress/LZ/LZOutWindow.cpp',
'7zip/Compress/RangeCoder/RangeCoderBit.cpp',
'7zip/Common/InBuffer.cpp',
'7zip/Common/OutBuffer.cpp',
'7zip/Common/FileStreams.cpp',
'7zip/Common/StreamUtils.cpp',
'Common/Alloc.cpp',
'Common/C_FileIO.cpp',
'Common/CommandLineParser.cpp',
'Common/CRC.cpp',
'Common/String.cpp',
'Common/StringConvert.cpp',
'Common/StringToInt.cpp',
'Common/Vector.cpp'
]

LZMAC_FILES = [
'7zip/Compress/LZMA_C/LzmaStateDecode.c',
'7zip/Compress/LZMA_C/LzmaStateTest.c'
]

LZMAC_OBJ=env.Object(LZMAC_FILES)
LZMA_OBJ=env.Object(LZMA_FILES)

lzma = env.Program('lzma', LZMA_OBJ, chdir='7zip/Compress/LZMA_Alone')

lzma_dec = env.Program('lzma-decode', LZMAC_OBJ, CCFLAGS=Split("$CCFLAGS -pedantic"), CPPDEFINES="_LZMA_PROB32")

Return('lzma', 'lzma_dec')

