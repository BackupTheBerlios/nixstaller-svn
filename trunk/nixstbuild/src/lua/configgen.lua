--  ***************************************************************************
--  *   Copyright (C) 2009 by Rick Helmus / InternetNightmare                 *
--  *   rhelmus_AT_gmail.com / internetnightmare_AT_gmail.com                 *
--  *                                                                         *
--  *   This program is free software; you can redistribute it and/or modify  *
--  *   it under the terms of the GNU General Public License as published by  *
--  *   the Free Software Foundation; either version 2 of the License, or     *
--  *   (at your option) any later version.                                   *
--  *                                                                         *
--  *   This program is distributed in the hope that it will be useful,       *
--  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
--  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
--  *   GNU General Public License for more details.                          *
--  *                                                                         *
--  *   You should have received a copy of the GNU General Public License     *
--  *   along with this program; if not, write to the                         *
--  *   Free Software Foundation, Inc.,                                       *
--  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
--  ***************************************************************************

--[[
Format:
    - Widget name (index). For easyness this is kept the same as the cfg name
    - Friendly Widget name
    - Type (string, choice etc)
    - Specific vars for widget type
    - Value
    - Description
-- ]]

configGenProperties = {
{ var = "appname", name = "Application name", type = "string",
    comment = "The application name" },
{ var = "archivetype", name = "Archive type", type = "choice",
    choices = { "gzip", "bzip2", "lzma" },
    comment = "Archive type used to pack the installer" },
{ var = "autolang", name = "Auto select language", type = "boolean",
    comment = "When enabled the installer will automaticly guess the right language. If this fails or when this option is disabled, the user has to choose a language." },
{ var = "logo", name = "Logo", type = "file", comment = "Logo image file" },
{ var = "targetos", name = "Target OSs", type = "multichoice",
    choices = { "linux", "freebsd", "netbsd", "openbsd", "solaris" },
    comment = "Target Operating Systems" },
{ var = "targetarch", name = "Target CPU Archs", type = "multichoice",
    choices = { "x86", "x86_64" },
    comment = "Target CPU Architectures" },
}

local function clearConf()
    for k in pairs(cfg) do
        if k ~= "unopts" then
            cfg[k] = nil
        end
    end
    
    for _, v in ipairs(configGenProperties) do
        v.value = nil
    end
end

local function syncWithCFG()
    -- Set all values from property table
    for _, v in ipairs(configGenProperties) do
        v.value = cfg[v.var]
    end
end

function loadGenConf(dir)
    clearConf()
    loadconfig(dir)
    syncWithCFG()
end

function saveGenConf(dir)
    local file = io.open(dir .. "/config.lua", "w")
    if file then
        file:write(string.format([[
-- File generated by Nixstbuild at %s
]], os.date()))

        for _, v in ipairs(configGenProperties) do
            local val
            if v.value == nil then
                val = "nil"
            elseif v.type == "boolean" then
                val = (v.value and "true") or "false"
            elseif v.type == "multichoice" then
                for _, v2 in ipairs(v.value) do
                    if not val then
                        val = string.format("{ \"%s\"", v2)
                    else
                        val = string.format("%s, \"%s\"", val, v2)
                    end
                end
                val = val .. " }"
            else -- string
                val = string.format("\"%s\"", v.value)
            end
            
            file:write(string.format([[

-- %s
cfg.%s = %s
]], v.comment, v.var, val))
        end

        file:close()
    end
end

function newGenConf(dir)
    clearConf()
    initconfig() -- Give cfg default values
    cfg.appname = "My App" -- Doesn't have default
    syncWithCFG()
    saveGenConf(dir)
end
