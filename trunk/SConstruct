import sys
import os
import glob
import commands
import shutil
import platform
import tarfile

distfiles_src = [
'main/main.cpp',
'main/main.h',
'main/utils.cpp',
'fltk/fltk.cpp',
'fltk/fltk.h',
'fltk/widgets.cpp',
'ncurses/ncurs.cpp',
'ncurses/ncurs.h',
'ncurses/widgets.cpp',
'ncurses/widgets.h',
'ncurses/utils.cpp',
'libsu/COPYING',
'libsu/CREDITS',
'libsu/libsu.h',
'libsu/libtest.cpp',
'libsu/LICENSE',
'libsu/main.cpp',
'libsu/main.h',
'libsu/SConstruct',
'libsu/terminal.cpp',
'libsu/utils.cpp',
'SConstruct',
'TODO'
]

# Bins are handled seperately with 'getallbins'
distfiles_user = [
'docs/nixstaller.html',
'internal/about',
'internal/startupinstaller.sh',
'makeself.sh',
'makeself-header.sh',
'geninstall.sh'
]

def getallbins():
    # Traverse files, from http://effbot.org/librarybook/os-path.htm
    stack = ['bin']
    bins = []
    while stack:
        directory = stack.pop()
        for file in os.listdir(directory):
            fullname = os.path.join(directory, file)
            if file == "ncurs" or file == "fltk":
                bins.append(fullname)
            if os.path.isdir(fullname) and not os.path.islink(fullname):
                stack.append(fullname)
    return bins

def stripallbins():
    bins = getallbins()
    for file in bins:
        Execute("strip -s %s" % file)
        
# Check if atleast one file exists from a given list
def checklibexist(context, fname):
    context.Message('Checking for %s...' % fname)
    if (os.path.exists(lib_dir+fname)):
        context.Result(1)
        return True

    context.Result(0)
    return False

def CheckLibWithEnv(context, library, header, language, libdir, incdir, call = "main();", autoload = 1):
    context.env.Append(LIBPATH = libdir, CPPPATH = incdir)
    ret = context.sconf.CheckLibWithHeader(library, header, language, call, autoload)
    context.env['LIBPATH'].remove(libdir)
    context.env['CPPPATH'].remove(incdir)
    context.did_show_result = 1 # Hack, says "Error: No result" otherwise
    return ret

EnsureSConsVersion(0,96,91)

opts = Options()
opts.Add('xlibsdir', 'Specifies where the library files for X are', '/usr/X11R6/lib')
opts.Add('xincdir', 'Specifies where the include files for X are', '/usr/X11R6/include')

env = Environment(options = opts, CCFLAGS = "-Wall -Os", LINKFLAGS='-static-libgcc', TARFLAGS='-c -z', TARSUFFIX='.tar.gz')

Help(opts.GenerateHelpText(env))

# Get current OS...if this != to uname I should fix it :-)
cur_os = sys.platform.rstrip('1234567890')
cur_arch = platform.machine()

if cur_arch[0] == 'i' and cur_arch.endswith("86"):
    cur_arch = "x86"
    
# OS/Arch specific dirs
lib_dir = 'lib/'+cur_os+'/'+cur_arch+'/'
bin_dir = 'bin/'+cur_os+'/'+cur_arch+'/'
inc_dir = 'include/'+cur_os+'/'+cur_arch+'/'

env.Append(LIBPATH=[lib_dir, 'libsu/'])
env.Append(CPPPATH=['main/', 'libsu/', 'include/', 'include/ncurses', 'include/'+cur_os, inc_dir, inc_dir+'cdk'])

# Current version
curnixstversion = '0.1'

if 'stripbins' in COMMAND_LINE_TARGETS:
    print 'Stripping all binaries in the bin/ directory...'
    stripallbins()
    Exit(0)

if 'tardist' in COMMAND_LINE_TARGETS:
    stripallbins()
    archname = 'nixstaller-' + curnixstversion + '.tar.gz'
    tarredfile = tarfile.open(archname, 'w:gz')
    for dfile in distfiles_src+distfiles_user+getallbins():
        tarredfile.add(dfile)
    tarredfile.close()
    print "Generated %s" % archname
    Exit(0)

if 'setupdist' in COMMAND_LINE_TARGETS:
    workdir = "tmp-setup-dist/"
    filesdir = workdir + "files_all/"
    outputfile = "nixstaller-" + curnixstversion + ".sh"
    stripallbins()

    if os.path.exists(workdir):
        print "Cleaning old workdir..."
        shutil.rmtree(workdir)
        
    os.mkdir(workdir)

    if not os.path.exists(filesdir):
        os.mkdir(filesdir)

    print "Copying all files to be installed..."
    for file in distfiles_src+distfiles_user+getallbins():
        dir = filesdir + os.path.dirname(file)
        if not os.path.exists(dir):
            os.makedirs(dir)

        shutil.copy(file, filesdir + file)

    print "Generate install config file..."
    cfgfile = open(workdir + "install.cfg", "w")
    cfgfile.write("""
appname Nixstaller
archtype bzip2
installdir select
languages english dutch
""")
    cfgfile.close()
    
    print "Copying welcome message..."
    shutil.copy("internal/intro.txt", workdir + "welcome")
    print "%s --> %s" % ("internal/intro.txt", workdir + "welcome")

    print "Generating installer"
    os.system("./geninstall.sh %s %s" % (workdir, outputfile))

    print "Cleaning workdir..."
    shutil.rmtree(workdir)

    Exit(0)
    
# configure stuff (only do this when not cleaning)
if not env.GetOption('clean'):
    conf = env.Configure(custom_tests = {'checklibexist' : checklibexist, 'CheckLibWithEnv' : CheckLibWithEnv})

    if not conf.checklibexist('libstdc++.a'):
        print 'Searching for libstdc++.a'
        lname = commands.getoutput('gcc -print-file-name=libstdc++.a')
        if lname:
            try:
                shutil.copy(lname, lib_dir)
                print "Copied %s to %s" % (lname, lib_dir)
            except (IOError, os.error), why:
                print "Can't copy %s to %s: %s" % (lname, lib_dir, str(why))
                Exit(1)
        else:
            print 'Error: Could not find any libstdc++.a! Please copy it manually to ', lib_dir
            Exit(1)

    if not conf.checklibexist('libutil.a'):
        print 'Searching for libutil.a'
        lname = commands.getoutput('gcc -print-file-name=libutil.a')
        if lname:
            try:
                shutil.copy(lname, lib_dir)
                print "Copied %s to %s" % (lname, lib_dir)
            except (IOError, os.error), why:
                print "Can't copy %s to %s: %s" % (lname, lib_dir, str(why))
                Exit(1)
        else:
            print 'Error: Could not find any libutil.a! Please copy it manually to ', lib_dir
            Exit(1)

    if not conf.CheckLibWithHeader('z', 'zlib.h', 'C++', 'gzFile f;', 0):
        print "Couldn\'t find libz !"
        Exit(1)
    if not conf.CheckLibWithHeader('ncurses', 'ncurses.h', 'C++', 'beep();', 0):
        print "Couldn't find libncurses !"
        Exit(1)
    if not conf.CheckLibWithHeader('cdk', 'cdk/cdk.h', 'C++', 'stopCDKDebug(NULL);', 0):
        print "Couldn't find libcdk !"
        Exit(1)
    if not conf.CheckLibWithEnv('X11', 'X11/X.h', 'C++', '$xlibsdir', '$xincdir', ';', 0):
        print "Couldn't find libX11 !"
        Exit(1)
    if not conf.CheckLibWithEnv('Xext', 'X11/X.h', 'C++', '$xlibsdir', '$xincdir', ';', 0):
        print "Couldn't find libXext !"
        Exit(1)
    if not conf.CheckLibWithHeader('png', 'stdio.h', 'C++', ';', 0):
        print "Couldn't find libpng !"
        Exit(1)
    if not conf.CheckLibWithHeader('jpeg', 'stdio.h', 'C++', ';', 0):
        print "Couldn't find libjpeg !"
        Exit(1)
    if not conf.CheckLibWithHeader('fltk', ['FL/Fl.H', 'FL/filename.H'], 'C++', 'fl_filename_isdir(0);', 0):
        print "Couldn't find libfltk !"
        Exit(1)
    if not conf.CheckLibWithHeader('fltk_images', 'FL/Fl.H', 'C++', ';', 0):
        print "Couldn't find libfltk_images !"
        Exit(1)
        
    env = conf.Finish()
else:
    # Make sure that scons properly cleans everything
    Execute(Delete('main/.sconsign'))
    Execute(Delete('ncurses/.sconsign'))
    Execute(Delete('fltk/.sconsign'))
    Execute(Delete('.sconf_temp'))
    Execute(Delete('.sconsign.dblite'))

# Builds libsu
libsu = env.SConscript('libsu/SConstruct')

# Builds main lib
main = env.Library("main/main", ['main/main.cpp', 'main/utils.cpp'])

env.Append(LIBS = Split('su main util'))

# UNDONE?
#if cur_os == 'linux':
#    env.Append(LIBS = 'acl')
#elif cur_os == 'netbsd':
if cur_os == 'netbsd':
    env.Append(LINKFLAGS = ' -Wl,--rpath -Wl,/usr/X11R6/lib')

# Builds ncurses frontend
ncurses = env.Program('ncurses/ncurs', Split('ncurses/ncurs.cpp ncurses/utils.cpp '
                       'ncurses/widgets.cpp'), LIBS=Split('$LIBS cdk ncurses'))

# Builds fltk frontend
fltk = env.Program('fltk/fltk', Split('fltk/fltk.cpp fltk/widgets.cpp'), LIBS=Split('$LIBS fltk fltk_images png jpeg Xext X11 z'),
                   LIBPATH=Split('$LIBPATH $xlibsdir'), CPPPATH=Split('$CPPPATH $xincdir'))

# Default to all
Default(fltk, ncurses, main, libsu, env.Install(lib_dir, libsu), env.Install(lib_dir, main), env.Install(bin_dir, ncurses), env.Install(bin_dir, fltk))
