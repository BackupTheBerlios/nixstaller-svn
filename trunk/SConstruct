import sys
import os
import glob
import commands
import shutil

# Check if atleast one file exists from a given list
def checklibexist(context, fname):
    context.Message('Checking for %s...' % fname)
    if (os.path.exists(lib_dir+'/'+fname)):
        context.Result(1)
        return True

    context.Result(0)
    return False


env = Environment(CCFLAGS = "-Wall -O", LINKFLAGS='-static-libgcc')

# Get current OS...if this != to uname I should fix it :-)
cur_os = sys.platform.rstrip('1234567890')
lib_dir = 'lib/'+cur_os

env.Append(LIBPATH=['lib/'+cur_os, 'libsu/'])
env.Append(CPPPATH=['main/', 'libsu/', 'include/', 'include/ncurses', 'include/'+cur_os, 'include/'+cur_os+'/cdk',
                     'include/'+cur_os+'/ncurses' ])

# configure stuff (only do this when not cleaning)
if not env.GetOption('clean'):
    conf = env.Configure(custom_tests = {'checklibexist' : checklibexist})

    if not conf.checklibexist('libstdc++.a'):
        print 'Searching for libstdc++.a'
        lname = commands.getoutput('gcc -print-file-name=libstdc++.a')
        if lname:
            try:
                shutil.copy(lname, lib_dir)
                print "Copied %s to %s" % (lname, lib_dir)
            except (IOError, os.error), why:
                print "Can't copy %s to %s: %s" % (lname, lib_dir, str(why))
                Exit(1)
        else:
            print 'Error: Could not find any libstdc++.a! Please copy it manually to ', lib_dir
            Exit(1)

    if not conf.checklibexist('libm.a'):
        print 'Searching for libm.a'
        lname = commands.getoutput('gcc -print-file-name=libm.a')
        if lname:
            try:
                shutil.copy(lname, lib_dir)
                print "Copied %s to %s" % (lname, lib_dir)
            except (IOError, os.error), why:
                print "Can't copy %s to %s: %s" % (lname, lib_dir, str(why))
                Exit(1)
        else:
            print 'Error: Could not find any libm.a! Please copy it manually to ', lib_dir
            Exit(1)
            
    if not conf.checklibexist('libutil.a'):
        print 'Searching for libutil.a'
        lname = commands.getoutput('gcc -print-file-name=libutil.a')
        if lname:
            try:
                shutil.copy(lname, lib_dir)
                print "Copied %s to %s" % (lname, lib_dir)
            except (IOError, os.error), why:
                print "Can't copy %s to %s: %s" % (lname, lib_dir, str(why))
                Exit(1)
        else:
            print 'Error: Could not find any libutil.a! Please copy it manually to ', lib_dir
            Exit(1)

    if not conf.CheckLibWithHeader('z', 'zlib.h', 'C++', 'gzFile f;', 0):
        print "Couldn\'t find libz !"
        Exit(1)
    if not conf.CheckLibWithHeader('bz2', ['stdio.h', 'bzlib.h'], 'C++', 'bz_stream s;', 0):
        print "Couldn't find libbz2 !"
        Exit(1)
    if not conf.CheckLibWithHeader('archive', 'archive.h', 'C++', 'archive_api_version();', 0):
        print "Couldn't find libarchive !"
        Exit(1)
    if not conf.CheckLibWithHeader('ncurses', 'ncurses.h', 'C++', 'beep();', 0):
        print "Couldn't find libncurses !"
        Exit(1)
    if not conf.CheckLibWithHeader('cdk', 'cdk/cdk.h', 'C++', 'stopCDKDebug(NULL);', 0):
        print "Couldn't find libcdk !"
        Exit(1)
    if not conf.CheckLibWithHeader('X11', 'X11/X.h', 'C++', ';', 0):
        print "Couldn't find libX11 !"
        Exit(1)
    if not conf.CheckLibWithHeader('Xext', 'X11/X.h', 'C++', ';', 0):
        print "Couldn't find libXext !"
        Exit(1)
    if not conf.CheckLibWithHeader('png', 'stdio.h', 'C++', ';', 0):
        print "Couldn't find libpng !"
        Exit(1)
    if not conf.CheckLibWithHeader('jpeg', 'stdio.h', 'C++', ';', 0):
        print "Couldn't find libjpeg !"
        Exit(1)
    if not conf.CheckLibWithHeader('fltk', ['FL/Fl.H', 'FL/filename.H'], 'C++', 'fl_filename_isdir(0);', 0):
        print "Couldn't find libfltk !"
        Exit(1)
    if not conf.CheckLibWithHeader('fltk_images', 'FL/Fl.H', 'C++', ';', 0):
        print "Couldn't find libfltk_images !"
        Exit(1)
    if cur_os == 'linux' and not conf.CheckLibWithHeader('acl', 'stdlib.h', 'C++', ';', 0):
        print "Couldn't find libacl !"
        Exit(1)
        
    env = conf.Finish()
else:
    # Make sure that scons properly cleans everything
    Execute(Delete('main/.sconsign'))
    Execute(Delete('ncurses/.sconsign'))
    Execute(Delete('fltk/.sconsign'))
    Execute(Delete('.sconf_temp'))
    Execute(Delete('.sconsign.dblite'))

# Builds libsu
libsu = env.SConscript('libsu/SConstruct')

# Builds main lib
main = env.Library("main/main", ['main/main.cpp', 'main/utils.cpp'], CCFLAGS='$CCFLAGS')

env.Append(LIBS = Split('su main archive z bz2 util'))

# UNDONE?
if cur_os == 'linux':
    env.Append(LIBS = 'acl')

# Builds ncurses frontend
ncurses = env.Program('ncurses/ncurs', Split('ncurses/ncurs.cpp ncurses/utils.cpp '
                       'ncurses/widgets.cpp'), LIBS=Split('$LIBS cdk ncurses'))

# Builds fltk frontend
fltk = env.Program('fltk/fltk', Split('fltk/fltk.cpp fltk/widgets.cpp'), LIBS=Split('$LIBS fltk fltk_images png jpeg Xext X11'))

# Build help extracter
# extr = env.Program('extracter/extracter', ['extracter/extracter.c'])

# Default to all
Default(fltk, ncurses, main, libsu, env.Install('lib/'+cur_os, libsu), env.Install('lib/'+cur_os, main), env.Install('bin/'+cur_os, ncurses), env.Install('bin/'+cur_os, fltk))
