/*
    Copyright (C) 2006 by Rick Helmus (rhelmus_AT_gmail.com)

    This file is part of Nixstaller.

    Nixstaller is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Nixstaller is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Nixstaller; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Linking cdk statically or dynamically with other modules is making a combined work based on cdk. Thus, the terms and
    conditions of the GNU General Public License cover the whole combination.

    In addition, as a special exception, the copyright holders of cdk give you permission to combine cdk program with free
    software programs or libraries that are released under the GNU LGPL and with code included in the standard release of
    DEF under the XYZ license (or modified versions of such code, with unchanged license). You may copy and distribute
    such a system following the terms of the GNU GPL for cdk and the licenses of the other code concerned, provided that
    you include the source code of that other code when and as the GNU GPL requires distribution of source code.

    Note that people who make modified versions of cdk are not obligated to grant this special exception for their modified
    versions; it is their choice whether to do so. The GNU General Public License gives permission to release a modified
    version without this exception; this exception also makes it possible to release a modified version which carries forward
    this exception.
*/

#include <fcntl.h>
#include <sys/stat.h>
#include <fstream>
#include <sstream>

#include "md5.h"
#include "main.h"

#ifdef WITH_LIB_ARCHIVE

#include <archive.h>
#include <archive_entry.h>

// Returns uncompressed file size of a gzipped tar file
int ArchSize(const char *archname)
{
    archive *arch;
    archive_entry *entry;
    int size = 0;

    arch = archive_read_new();
    archive_read_support_compression_all(arch);
    archive_read_support_format_all(arch);
    archive_read_open_file(arch, archname, 512);
    
    while (archive_read_next_header(arch, &entry) == ARCHIVE_OK)
    {
        size += archive_entry_size(entry);
        archive_read_data_skip(arch);
    }
    
    archive_read_finish(arch);
   
    return size;
}
#else
// Reads a text file generated by geninstall.sh which as filesizes for the files in 'archname'
void GetArchiveInfo(const char *archname, std::map<std::string, unsigned int> &archfilesizes, unsigned int &totalsize)
{
    char *fname = CreateText("%s.sizes", archname);
    std::ifstream file(fname);
    std::string arfilename;
    unsigned int size;

    // Read first column to size and the other column(s) to arfilename
    while(file && (file >> size) && std::getline(file, arfilename))
    {
        EatWhite(arfilename);
        archfilesizes[arfilename] = size;
        totalsize += size;
    }
}
#endif

char *CreateText(const char *s, ...)
{
    char *txt;
    va_list v;
    
    va_start(v, s);
    vasprintf(&txt, s, v);
    va_end(v);
    
    // Check if string was already created
    if (!StringList.empty())
    {
        for (std::list<char *>::iterator it = StringList.begin(); it != StringList.end(); it++)
        {
            if (!strcmp(*it, txt))
                return *it;
        }
    }
    
    StringList.push_front(txt);
    return txt;
}

void FreeStrings()
{
    debugline("freeing %d strings....\n", StringList.size());
    while(!StringList.empty())
    {
        debugline("STRING: %s\n", StringList.back());
        free(StringList.back());
        StringList.pop_back();
    }
}

bool FileExists(const char *file)
{
    struct stat st;
    return (lstat(file, &st) == 0);
}

bool WriteAccess(const char *file)
{
    struct stat st;
    return ((lstat(file, &st) == 0) && (access(file, W_OK) == 0));
}

bool ReadAccess(const char *file)
{
    struct stat st;
    
    if (lstat(file, &st) != 0)
        return false;
    
    int check = (S_ISDIR(st.st_mode)) ? (R_OK | X_OK) : (R_OK);
    return (access(file, check) == 0);
}

// Incase dir does not exist, it will search for the first valid top directory
std::string GetFirstValidDir(const std::string &dir)
{
    if ((dir[0] == '/') && (dir.length() == 1))
        return dir; // Root dir given

    if (FileExists(dir))
        return dir;
    
    std::string subdir = dir;

    // Remove trailing /
    if (subdir[subdir.length()-1] == '/')
        subdir.erase(subdir.length()-1, 1);
    
    std::string::size_type pos;
    do
    {
        pos = subdir.rfind('/');
        if (pos == std::string::npos)
        {
            // No absolute path given...just return current dir
            char curdir[1024];
            if (getcwd(curdir, sizeof(curdir)) == 0)
                return "/";
            return curdir;
        }
        else if (pos == 0) // Reached the root dir('/')
            return "/";
        subdir.erase(pos);
    }
    while (!FileExists(subdir));
    return subdir;
}

// From http://tldp.org/HOWTO/Secure-Programs-HOWTO/protect-secrets.html
void *guaranteed_memset(void *v, int c, size_t n)
{
    volatile char *p = (volatile char *)v;
    while (n)
    {
        n--;
        *(p++) = c;
    }
    return v;
}

// Used for cleaning password strings
void CleanPasswdString(char *str)
{
    if (str)
    {
        guaranteed_memset(str, 0, strlen(str));
        free(str);
    }
}

std::string &EatWhite(std::string &str, bool skipnewlines)
{
    const char *filter = (skipnewlines) ? " \t" : " \t\r\n";
    std::string::size_type pos = str.find_first_not_of(filter);

    if (pos != std::string::npos)
        str.erase(0, pos);
    
    pos = str.find_last_not_of(filter);

    if (pos != std::string::npos)
        str.erase(pos+1);
    //return ret.substr(fpos, (lpos==std::string::npos) ? std::string::npos : ((lpos-fpos)+1));
    return str;
}

// Put every line from a string in a list
void MakeStringList(const std::string &str, std::vector<char *> &strlist)
{
    std::istringstream strstrm(str);
    std::string line;
    while(strstrm && std::getline(strstrm, line))
        strlist.push_back(MakeCString(line));
}

// Put every line from a string in a list (C strings)
void MakeStringList(const char *str, std::vector<char *> &strlist)
{
    std::istringstream strstrm(str);
    std::string line;
    while(strstrm && std::getline(strstrm, line))
        strlist.push_back(MakeCString(line));
}

// Used by config file parsing, gets string between a text block
void GetTextFromBlock(std::ifstream &file, std::string &text)
{
    std::string tmp;
    text.erase(0, 1); // Remove [
    EatWhite(text);
            
    while (file)
    {
        std::getline(file, tmp);
        text += '\n' + EatWhite(tmp);
        if (text[text.length()-1] == ']')
        {
            // Don't use "\]" as exit point(this way we can use a ] in a text block)
            if ((text.length() > 1) && (text[text.length()-2] == '\\'))
                text.erase(text.length()-2, 1);
            else
                break;
        }
    }
    
    if (text[text.length()-1] == ']')
    {
        text.erase(text.length()-1, 1); // Remove ]
        EatWhite(text);
    }
}

std::string GetMD5(const std::string &file)
{
    FILE *fp = fopen(file.c_str(), "rb");
    
    if (!fp)
        return "0";

    unsigned bytes = 0;
    char buf[4096];
    md5_state_t state;
    md5_byte_t digest[16];
    char hex_output[16*2 + 1];
    
    md5_init(&state);
    
    while((bytes = fread(buf, 1, sizeof(buf), fp)))
    {
        md5_append(&state, (const md5_byte_t *)buf, bytes);
        char txt[4097];
        strncpy(txt, buf, 4096);
        txt[4096] = 0;
    }

    md5_finish(&state, digest);

    for (int di = 0; di < 16; ++di)
        sprintf(hex_output + di * 2, "%02x", digest[di]);
    
    fclose(fp);
    return hex_output;
}
